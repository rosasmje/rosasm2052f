fixes-changes from RosAsm2052b
********
programming fixes:
1-6.
Proc LoadWizardAndPasteCode:
added 4 Closehandle, 1 UnmapViewOfFile,
fixed 1 thing

********
MACRO engine fixes:
7.
GetInternalVariableCondition:
 case  .Else_If W$esi = '<>'
         If B$esi = '0'
            needs then INC ESI 
8.
WriteMacroVariable:
added skip SPASE, if is 1st byte!

********
RELOC-building bug & minimum-RELOC for DLL/SYS fixes:

1. in WriteCheckSum:
[code]If D$RelocSectionSize => 8 ; was '>'
[/code]
2. in WritePeCheckSum:
[code]If D$RelocSectionSize => 8 ; was '>'
[/code]
3.4. in WriteSysFile & WritePE
[code]  ;was "On D$RelocSectionSize > 8"
        If D$RelocSectionSize => 8 ;jE!
          call 'KERNEL32.WriteFile' ...

        End_If
[/code]
5.
in PrepareDllVariables:
[code]If D$RelocSectionSize => 8 ;jE!
[/code]
6-9.
in WritePeHeaders:
[code]6.
L1:     On D$RelocSectionSize => 8, inc eax

7.
    If D$SavingExtension = '.DLL'
        or eax &IMAGE_FILE_DLL
        On D$RelocSectionSize < 8, or eax &IMAGE_FILE_RELOCS_STRIPPED ;jE!
    Else_If D$SavingExtension = '.SYS'
        On D$RelocSectionSize < 8, or eax &IMAGE_FILE_RELOCS_STRIPPED ;jE!
    Else
        or eax &IMAGE_FILE_RELOCS_STRIPPED
    End_If

8.
L1:     If D$RelocSectionSize => 8 ;jE!

9.
L1:     If D$RelocSectionSize => 8 ;jE!
[/code]

RELOC-building bug-fixes
10.
in StoreReloc:

[code];added>>
L0:
...
If D$RelocSectionSize = 8 ; if unused RelocSection, reuse it for Next
 add D$RelocPage PageSize | mov eax D$RelocPage |
 mov ecx D$RelocationPtr | mov D$ecx-8 eax | jmp L0<
End_IF
..
      pop edi, eax
jmp L0<< ; don't continue, becouse can be over NEXT-PAGE ;jE!
[/code]

11.
in BuildRelocationAndFillSymbols:
[code]        call FillCodeSymbols

        call CloseRelocation
;jE! added>>
        If D$RelocSectionSize = 8                   ; Case of no relocation
            sub D$RelocationPtr 8                   ; wanted in CODE
        mov eax D$RelocationPtr | and D$eax 0 | and D$eax+4 0 ;kill unused
        End_If

        mov eax D$RelocationPtr | sub eax D$Relocation
        ; Case of no relocation at ALL, make MINIMUM-RELOC
        If eax = 0
           mov eax D$Relocation | mov D$eax 0 | mov D$eax+4 08
           add D$RelocationPtr 8
        End_If
...
[/code]

20.
incorrect conversion happens for NEGATIVE numbers in QWORD definition;
[TESTQ: Q$ 0-1] will stored in DATA as 00000000_FFFFFFFF;
must be FFFFFFFF_FFFFFFFF;

Bugs i found here in StoreOneData:
after
[code]L4: call TranslateDecimal ; EDX:EAX return
for QWORD we jump to Q7>
...
Q7:     If B$DataSign = &TRUE
            neg eax | neg ebx;
;ERROR n1. why EBX?? must EDX!
;ERROR n2. NEG 0 = 0, so we lost HIGH_dword in EDX as -1
        End_If
[/code]

doing NEG on high-dword will not give correct QWORD..
correct is only full SUB/SBB operation:

[code]Q7:     If B$DataSign = &TRUE
            push 0 | push 0 | sub D$esp eax | sbb D$esp+4 edx ;jE!
            pop eax | pop edx
        End_If
[/code]

21.
incorrect loop can happen in CheckExtendedVirtual, bcoz not checked NumberOfSections;
4 lines added marked with: ;jE!



22. in "WritePeHeaders" fixed for drivers:
[code]
  mov W$edi-2 1 ; SubSystem NATIVE jE! - corrected.
  mov ax 0; &IMAGE_DLLCHARACTERISTICS_WDM_DRIVER. removed WDM, bcoz WDM is not unloadable
[/code]


ADDed missed mnemonics RETF, CALLF, JMPF in assembler
23.
RETF assembles with same rule as RET;

24-25.
CALLF & JMPF have two variants
1st- memory-ptr CALLF & JMPF assembles with same rule as same_segment far CALL & JMP
just BIT changed in Opcode2; in memory should be EIP:CS / 6byte long struct
[code]
    CALLF D$MEM32_DataLabel
    CALLF D$eax
    JMPF  D$eax+imm
    CALLF D$eax+edx+imm
    JMPF  D$esp+ebp*4+imm

    CALLF W$eax; <  here in MEM32 should be IP:CS for 16bit code call/jump
                    4byte long struct
[/code]
direct address CALLF-JMPF:
first Word is Segment, second Dword EIP (write without ':')
[code]
    CALLF D$03333 077778888
    JMPF D$03333 Label (not Local)
[/code]
or first Word is Segment, second Word IP for 16bit code call
    CALLF W$03333 07788
    JMPF  W$03333 07788

26. fixed Disassembler for compatible output (was 'CALLF32/16' 'JMP32/16' strings)

27. fixed PE-header values for drivers in "WritePeHeaders":
[code]
  Else_If D$SavingExtension = '.SYS'
    mov W$edi-2 1 ; SubSystem NATIVE jE! - corrected.
    mov ax 0; &IMAGE_DLLCHARACTERISTICS_WDM_DRIVER. removed WDM, bcoz WDM is not unloadable
[/code]

28. fixed miss-tape
[code]
im16Size:
    On D$imm32 >= 010000,  error D$OverWordPtr; << was OverBytePtr
    mov B$TrueSize WordSize
  ret
[/code]

29. allowed missed down-direction LOOP assembly & disassembly

30. added variable "RelocsWanted" & RELOC-checkbox in "Output" options. (DLG_res changed)
now you can force RELOCations in EXEcutable or force NO-RELOCations in DLL.
On New_File case, flag will be reset for EXE & set for DLL;
On Existing_file case (or on Disassembly) flag will be set as in Source_file.
SYS-files always will be with RELOCs.

31. fixed rare-case crash on RightClick in Title "Click",
caused by "D$MacroNamePointer" variable

32. allowed all SREG R/M/32bit MOVes assembly & disassembly
(was allowed only SREG REG32)
easy done by: "mov B$wBitDisagree &FALSE"

33. added DialogEX structure "light" support.
Rosasm's DialogEditor did crash on DialogEx structure in RSRC, came from Disasmed files.
.I changed "FromBinToTextTemplate" code, so it will convert DislogEX to Dialog struct.
HELPID member will only lost in conversion.
.EXSTYLE member will preserved in structure, becouse XP cares about it!
for this, also updated "FromTextToBinTemplate" & Dlg to file saver.
."NextTemplateLine" macro simplfied.
.Font-member will injected, if not exists.
."ControlIndex" values was defined as numbers, so code was very non-informative.
I defined equates: [Line_Style 0 | Line_exStyle 1 .... Line_empty 7]
& then found&replaced all need numbers in "TITLE Dialog". (crasy work, ~40places)
.Removed WS_THICKFRAME style from ListControl, becouse can overlap below controls

34. fixed crashES in StringsEditor!
i corrected "Group16Strings" logic, so it will no more crash on any kind deletion.
+optimiZjEd (Store one String to "OneStringBuffer") code > copyU_with_count

35. fixed "LOCK OR" assembly error.
SPACE check was at B$esi+3, should B$esi+2. (probably copy-pasted)
+simplified LOCK BTx IF-logic.

36. fixed crash in "NewHowManyExport".
>> reinvented in 38 fix >>

37.
.Export-ModuleName unusual placement moved to end of Export names array without upcase_r.
.for ExportNames full sorting added new-proc DualBubbleSortExportListPointers and variable: ExportListPointers
.ColonSign replaces ':' as DataExport marker.
.for debug added variable "ExportALL" and upgraded procs: NewPrepareExport, NewHowManyExport, NewStoreToExportListA
.also in NewStoreToExportListA added final precise calculation of Export section size (added variable: NumberOfDataExports)
.added "TooManyExports" error string (<010000);
.in "Output tab" will add check-box for choosing ExportALL (DLG_res changed)
for check-box managing added few lines of code in "Format" title.
.fixed CRLF_adding at end of source in proc KillTrailingSpaces
.fixed any found CMP W$x 'PE' to D$x 'PE'

38.
.introdused rule using Colon with Spaces for Labels:
NoSpaceBeforeColon & MustSpaceAfterColon, added Error strings for this.
according of this, fixed any appropriate places in source like:
P9:]
to
P9: ]
also for this upgraded NewStoreToExportListA & NewHowManyExport;
+ upgraded Error reporting for show error place in Source
.macros Local & Arguments changed to simple ones

//////////////
Now letZZ change RosAsm version for huge update:
New Full Name EXPORT managing!!!

RosAsm2052f      (c,d,e used Guga)

Full EXPORTs has following format:
1. with not defined ordinals - to Exported LABEL immediate(no-space)
append full-name-ANSI-string in Quotes:

MyExpLabel::'@this%is$full#name!'

2. If also Ordinal required - name Exported LABEL as 'ORD' + hex-number:

ORD01::'@this%is$full#Name_with_ordinal #1 !'
..
ORD0FFFF::'@this%is$full#Name_with_ordinal #65535 !'

3. If only Ordinal need without name:
ORD01::
..
ORD0FFFF::

Updated Procs:
.(in DIS, for same full output!)
WriteExportedFunctionLabel
CheckExport
.(in Tools_exec) fixed Export-reading for best :) (only-Ordinal cases)
ViewExport
GetExportScannerFile
GetExportDirPointer
InitExportsProcList
ExportFunctionFindFirst
.(in EXPORT-builder procs)
NewHowManyExport
NewStoreToExportListA
FillExportSection
StoreExportAdresse
StoreExportNamePtr
StoreExportOrdinal
StoreFunctionName
DualBubbleSortExportListPointers_AndOrdinals
.added Procs:
CheckExportOrdinal
FindExportFullNameString (Error-report)
FindLostExportString (Error-report)
ErrorStrings: BadExportOrdinal SameExportOrdinal
.added Variables:
NumberOfDisExportNames DisExportOrdBase NumberOfJunkBytes ExpOrdArray
OnlyOrdinalExport OrdinalExport ExpOrdBase

>>>now RosAsm can DIS & reAssemble MSVCP50.dll with it's huge ExpNames<<<

.removed many unwanted &FILE_SHARE_WRITE from any Call CreateFileA..
.in StoreAllMacros fixed '<' char case, it was above xored by 080..

.fixed cases of Call ExitProcess. correct programming requires closing Window before ExitProcess
so added line
ON D$hwnd <> 0, call 'USER32.DestroyWindow' D$hwnd
for same reason upgraded Proc FinalExceptionHandler
+added LastFinalException in case subsequent crashes.

.upgraded Title Config. for better programming.
.added Proc GetLabelNamePtrFromExport. now in crash-log will written nearest Exported Label from crash-IP
(requires Exports or ExportAll)

.inDisasm added Proc tryFastMove, it will copy huge memory using XMM or MMX registers. (x1,5)
ReleaseDisTablesCopies will called once, after job..
.for this added getCPUID Proc. called from Main.
variables added: isMMX, isSSE, isSSE2, isSSE3

.Proc WriteNearestExports added, to write in crash log also caller' s symbols found in stack.
also CPUID will written in crash dump.. just more info 

.in Main; added also GetVersionInfo (from Exeption). will useful
GetModuleHandle moved at first.

.added Proc RemoveMSGs. is very usefull. it will remove queued MSGs, so MainWindow will not stall on big jobs.

.added FlushFileBuffers in 4 places. more secure.

!RosAsm2052f_05
.changes in Disassembler > now Relocation info will used from source file.
advantage > gives No_false_pointers.

.cleanup in VirtualAlloc_macro/VirtAlloc Proc
This procedure changed 5 registers! now only EAX will changed (& this is REQ).
there are places many in source, where registers are push-poped because of this.

.fixed in WndProcs: removed Pushad-Popad, added USES EXB ESI EDI
fixed few Ansi<>Unicode User32 import calls

.bug fix: CheckControlStyles used EBP.
upgraded DualBubbleSortExportNamesPointersAndOrdinals
added util proc DualBubbleSortDWORDs:

.Because of Pushad-Popad removal, there comes problem with EBP. (popad did restore it).
i added variable OldStackEBP & placed save-restore instruction in required places with OldStackPointer
also for tracking damage EBP & ESP i implmented debug-version of Proc-Macros.
(it is commented below normal. if need, comment normal, uncomment this.)
it will execute BP, if ESP or EBP will not match to saved ones.
it also can be used as safe macro, because can mostly restore ESP or EBP.

.fixed Disassembly of MOVSS, MOVD; & assembly of PSHUFLW
.updated also Disasm-macros-set

.correcture fixes
.at every API- CloseHandle added 'AND D$HANDLE 0' for null handle.
.uppss, my added FlushFilesBuffers was after CloseHandle.. corrected
.on Brush-handles was CloseHandle; replaced by DeleteObject
.in ReadIcon opened ICON handle was not closed on bad-case. added "Call CloseOtherFilesRead"

_10
.in ReadIcoFile on Bad-case CloseHandle was not called. corrected.
.prev Disasm fix causes change in Dis_r32_r16__rm32_rm16. done
.upgraded TryFastMove - more SFENCEs. XMMMove discarded, MMXMove is faster.


!! RosAsm2052G_00
. RESOURCE section will last section!! (before SRC)
because RSRC section was before other sections, editing RSRC by other editors was mostly impossible.
Resource Editors don't&can't relocate any code-data & thusly damage image, if RSRC-section will require enlarging.
Now this is in past..
Note: seems, this modification is backward-compatible.
.Added proc isValidRosaMZPE; does many checks in PE-header. discovers Source pointer&size; (if changed by RSRC-editor)
added Error-string DamagedRosasmPE. added PE-header Equates.

_01
.fixed no-pointers case in my Relocations/Disasm; needs NO-EIP case for DLLs
.e_lfanew - standart method of find PeTagPointer;
.Sections offset calc from SizeOfOptionalHeader;
.isValidMZPE proc added with bunch of tests
. PEstructError string added
.proc SearchPEstartOfResource fixed to e_lfanew-method, SizeOfOptionalHeader , '.rsr' name

_04
.GUGA added new RightClick Dialog for numbers and ASCII conversions
_04A
.in CheckImport DisFail if first DLL-name is null; if FIRSTTHUNK is null
.in BuildTitleTable:    ON D$CodeSource = 0, ret
.in ReplaceSourceOnly: If B$AllOrPart = 0-1 | mov ... D$ActualTitle 0 <<

_05
.changes in LoadDisResources: rewritten SearchDisPEstartOfResource;
it will accept resource if it is not section aligned & without '.rsrc' section-name
.changed also ReadRosAsmPeIcon; and little fixes in title Icon

_06
.compilable PE-header now is easy-movable, (for custom MZ-string in header)
.added variable DisSectionsHeaders,  wich replaces "GetPeHeader SectionsHeaders" occurences,
because OptionalHeader can be other than E0.
.in CheckImport: DisFail if any DLL's first think is null
added possibility of very short DLL-name
.in ReAlignPE: SECTION_RVASIZE will replaced with SECTION_FILESIZE, only if Null (not if bigger)
.added Header-disassembly option, from 3d byte  {mov D$FirstSection 2}
for this added var DisasmHeader, upgraded DisassembleProc, added CheckBox in Dialog-resource
.for more security, in PE-file opening places (OpenPeForReadingIcon, GetExportScannerFile) added call to isValidMZPE

_07
.many fixes-improvements:
.in Disassembler, WM_DROPFILES case, DownLoop allow, InitMacroWithIf fix, StoreDBCode fix,
Guga's new atoi64 fixed (Proc removed).
.BarProgress management: now you can exit too long Disasm process by closing progress bar;
.FinishDllVariables proc added.

_08
.new 2x-fast LocalLabel List-search engine.

_09
.fix in IATCheck
.kill paired relocation on same address!
.opt-fixed SearchForSIB: EBP-base case incorrect assembly fix by set DisInside flag.
.typo "lenght" in RSRC fixed. {TmX}

_10
.Memory manager tables moved to allocated space!
.MAXDIALOG & others fixed to 1200 (2100 mostly was typo)


;isValidMZPE should more enhanced & ErrorStrings needs to add.
;UPX-packer puts Header-Size 01000 while true is 0400.. bad..

; this bad taped> [ B|uildCommentedCodeReference:: 32 ] infinite_loop in macros-jobs!!!
; if ESC OpenFileName, then prev exe-name lost